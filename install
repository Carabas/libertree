#!/bin/bash

# --------------------------------------------------------------------------------
# Settings

safety() {
  if [[ "$1" == "on" ]]; then
    set -o nounset # abort if we try to use an unset variable
    set -o errexit # exit if any statement returns a non-true return value
  else
    set +o nounset
    set +o errexit
  fi
}
safety on

# --------------------------------------------------------------------------------
# Logging functions

info() {
  echo -e "[INFO] $1"
}

warn() {
  echo -e "[WARNING] $1"
}

fatal() {
  echo -e >&2 "[ERROR] $1"

  # execute clean up command in $2 if provided
  [[ "${2:-unset}" == "unset" ]] || $2
  exit 1
}


# --------------------------------------------------------------------------------
# Functions to be used as a common user

determine_system() {
  local system="$(uname|tr a-z A-Z)"
  if [[ "$system" == "LINUX" ]] || [[ "$system" =~ *BSD* ]]; then
    DIST=$(ls /etc/*-release | sed -e 's/\/etc\/\(.*\)-release/\1/')
    case "$DIST" in
      (arch)
        INSTALL="pacman -S"
        ;;
      (gentoo)
        INSTALL="emerge -1atv"
        ;;
      (*)
        INSTALL="UNKNOWN"
        warn "auto-install is not supported on your system."
        ;;
    esac
  else
    INSTALL="UNKNOWN"
  fi
}

exists() {
  local NAME=$1
  local BIN=$2
  local PKGS=$3

  # if exists: skip
  command -v $BIN >/dev/null 2>&1 && return 0

  if [[ "$INSTALL" == "UNKNOWN" ]]; then
    fatal "$NAME: required but not installed. Please install it manually."
  fi
  warn "$NAME: required but not installed."
  offer_install $NAME $BIN $PKGS

  # check again
  command -v $BIN >/dev/null 2>&1 && return 0
  # if failed: abort
  fatal "$NAME: required but not installed. Please install it manually."
}

offer_install() {
  local NAME=$1
  local BIN=$2
  local PKGS=$3

  echo "Do you want to install $NAME through your package manager now? [y/n]"
  read -sn1 choice
  if [[ "$choice" != "y" ]]; then
    fatal "$NAME is required. Please install it manually."
  fi

  # find the right package name for the given $DIST
  for pair in $PKGS; do
    if [[ "$pair" =~ ^$DIST ]]; then
      local PKG="${pair#*:}" # TODO: is this a bashism?
      break
    elif [[ "$pair" =~ ^default ]]; then
      local DEFPKG="${pair#*:}" # TODO: is this a bashism?
    fi
  done

  # use default package if no exception for this system was provided
  local PKG=${PKG:-$DEFPKG}

  # install
  if [[ $(id -u) -ne 0 ]]; then
    if [[ $(command -v sudo) ]]; then
      info "You are not root. Using sudo."
      local PREFIX="sudo"
    else
      fatal "You are not root and the sudo command cannot be found. Cannot install dependencies."
    fi
  fi

  echo -e "\n\n------- PACKAGE MANAGER --------"
  $PREFIX $INSTALL $PKG
  echo -e "---- END OF PACKAGE MANAGER ----\n\n"
}

check_version() {
  local NAME=$1
  local V_REQ=$2
  local V_EXIST=$3
  [[ $V_EXIST = $V_REQ ]] || fatal "$NAME: found version \"$V_EXIST\", but \"$V_REQ\" is required."
}

check_dependencies() {
  # 1. check if executable exist
  # 2. check if version is okay

  info "Checking dependencies..."

  # PostgreSQL 9.0.0 <= v < 10.x.x
  local pkgs="default:postgresql gentoo:postgresql-server"
  exists "PostgreSQL" "postgres" "$pkgs"
  local v=$(postgres --version | cut -d' ' -f3 | cut -d'.' -f1)
  check_version "PostgreSQL" "9" $v

  # git
  local pkgs="default:git"
  exists "Git" "git" "$pkgs"

  # GraphicsMagick or ImageMagick
  # TODO: ugly not to use "exists" function
  local pkgs="default:graphicsmagick"
  [[ $(command -v gm 2>/dev/null) || $(command -v mogrify 2>/dev/null) ]] || fatal "ImageMagick/GraphicsMagick: one of the two is required but not installed. Aborting."

  info "All dependencies are installed."
}

install_rvm() {
  # skip if rvm exists or use doesn't want to install it.
  command -v rvm >/dev/null 2>&1 && return 0
  warn "RVM is not installed. Do you want to install it now? [y/n]"
  read -sn 1 choice
  if [[ "$choice" != "y" ]]; then
    echo "SKIPPED"
    fatal "RVM is required. Please install it manually."
  fi

  # TODO
  fatal "TODO: not implemented yet. Please install RVM manually."
}

setup_user() {
  echo "It is recommended to run libertree as a system user."
  echo "Please press enter to use the user \"libertree\" or optionally input the name of the system user you would like to use instead. [default: libertree]"
  read username

  if [[ "${username:-default}" == "default" ]]; then
    LT_USER="libertree"
  else
    LT_USER=$username
  fi
  info "Will use \"$LT_USER\" as the system user."

  # skip if user exists
  $(id -u $LT_USER >/dev/null 2>&1) && info "The user \"$LT_USER\" already exists. Skipping." && return 0

  # otherwise add user as root
  local PREFIX=""

  if [[ $(id -u) -ne 0 ]]; then
    if [[ $(command -v sudo) ]]; then
      info "You are not root. Using sudo."
      PREFIX="sudo"
    else
      fatal "You are not root and the sudo command cannot be found. Please run this script as root."
    fi
  fi

  $PREFIX useradd -m $LT_USER
  info "enter new password for user \"$LT_USER\""
  $PREFIX passwd $LT_USER || fatal "removing user \"$LT_USER\" because no password was supplied." "$PREFIX userdel -rf $LT_USER"
}

install_as_system_user() {
  [[ $(id -u $LT_USER) ]] || fatal "The user \"$LT_USER\" does not exist."

  if [[ $(id -u) -ne 0 ]]; then
    info "Switching to user \"$LT_USER\"."
  fi

  # export functions to subshell
  export -f safety
  export -f info warn fatal
  export -f clone_repos setup_db setup_backend setup_frontend
  export -f stuff_for_system_user
  su $LT_USER -c "stuff_for_system_user"
}


# --------------------------------------------------------------------------------
# Functions to be used as the libertree user

stuff_for_system_user() {
  safety on # never do without safety checks, even in subshell
  clone_repos
  setup_db
  setup_backend
  setup_frontend
}

clone_repos() {
  info "Cloning repositories as libertree user..."

  # TODO: update with proper URL for public repos
  URL="some.hostname.tld"
  mkdir -p ~/git
  cd ~/git
  git clone git://$URL/libertree-db.git
  git clone git://$URL/libertree-backend-rb.git
  git clone git://$URL/libertree-client-rb.git
  git clone git://$URL/libertree-frontend-ramaze.git
}


setup_db() {
  echo -n "Do you want to create a new db? [y/n] "
  read -sn 1 choice
  if [[ "$choice" != "y" ]]; then
    echo "SKIPPED"; return 0
  fi

  # TODO: untested
  cd ~/git/libertree-db
  export PGHOST=localhost
  ./createuser.sh
  ./createdb.sh
  cp database.yaml.example database.yaml
  cd rb
  rvm use --create 1.9.3@libertree-db
  gem install bundler
  bundle install
  ./migrate.sh
}

setup_backend() {
  echo -n "Do you want to install the ruby backend? [y/n] "
  read -sn 1 choice
  if [[ "$choice" != "y" ]]; then
    echo "SKIPPED"; return 0
  fi
  echo ""

  # TODO: untested
  cd ~/git/libertree-backend-rb
  rvm use --create 1.9.3@libertree-backend-rb
  gem install bundler
  bundle install
  bundle exec ruby generate-key-pair.rb
  cp config.yaml.example config.yaml

  # ask if $EDITOR is undefined
  if [[ "${EDITOR:-unset}" == "unset" ]]; then
    echo -n "What program do you want to use for editing the configuration file?"
    read -s choice
    command -v $choice >/dev/null 2>&1 || fatal "The editor could not be found."
    EDITOR=$choice
  else
    info "Opening configuration file for editing tasks."
    info "Please press a key to continue."
    read -n1
  fi

  ${EDITOR} config.yaml
}

setup_frontend() {
  echo -n "Do you want to install the ramaze frontend? [y/n] "
  read -sn 1 choice
  if [[ "$choice" != "y" ]]; then
    echo "SKIPPED"; return 0
  fi

  # TODO: untested
  cd ~/git/libertree-frontend-ramaze
  rvm use --create 1.9.3@libertree-frontend-ramaze
  gem install bundler
  bundle install
  cd config
  cp database.yaml.example database.yaml
}

# --------------------------------------------------------------------------------
# Main

wizard() {
  determine_system
  check_dependencies
  install_rvm
  setup_user
  install_as_system_user
  echo -e "\nYour Libertree has been planted."
}

wizard
