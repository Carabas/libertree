#!/bin/bash

# --------------------------------------------------------------------------------
# Settings

safety() {
  if [[ "$1" == "on" ]]; then
    set -o nounset # abort if we try to use an unset variable
    set -o errexit # exit if any statement returns a non-true return value
  else
    set +o nounset
    set +o errexit
  fi
}
safety on

# --------------------------------------------------------------------------------
# Logging functions

say() {
  echo -e "$1"
}

info() {
  # TODO: make this depend on verbosity setting
  say "$1"
}

warn() {
  say "[WARNING] $1"
}

fatal() {
  echo -e >&2 "\n[ERROR] $1"

  # execute clean up command in $2 if provided
  [[ "${2:-unset}" == "unset" ]] || $2
  exit 1
}

yes_or_fatal() {
  QUESTION="$1"
  ERROR="$2"

  echo -n "$QUESTION [y/N]"
  read -sn1 choice
  if [[ "$choice" != "y" ]]; then
    fatal "$ERROR"
  fi
  echo ""
}

skip_decision() {
  echo -n "$1 [y/N] "
  read -sn 1 choice
  if [[ "$choice" != "y" ]]; then
    say "SKIPPED"; return 1
  fi
  echo ""
}

# --------------------------------------------------------------------------------
# Functions to be used as a common user

determine_system() {
  local system="$(uname|tr a-z A-Z)"
  if [[ "$system" == "LINUX" ]] || [[ "$system" =~ *BSD* ]]; then
    DIST=$(find /etc -maxdepth 1 -type f -name "*-release" | sed -e 's|/etc/\(.*\)-release|\1|')
    case "$DIST" in
      (arch)
        INSTALL="pacman -S"
        ;;
      (gentoo)
        INSTALL="emerge -1atv"
        ;;
      (fedora)
        INSTALL="yum install"
        ;;
      (*)
        INSTALL="UNKNOWN"
        warn "auto-install is not supported on your system."
        ;;
    esac
  else
    INSTALL="UNKNOWN"
  fi
}

# Checks if a given binary can be found, and offers
# to install the matching package if it's missing.
exists() {
  local NAME=$1
  local BIN=$2
  local PKGS=$3

  # if exists: skip
  command -v $BIN >/dev/null 2>&1 && return 0

  if [[ "$INSTALL" == "UNKNOWN" ]]; then
    fatal "$NAME: required but not installed. Please install it manually."
  fi
  warn "$NAME: required but not installed."
  offer_install $NAME $PKGS

  # check again
  command -v $BIN >/dev/null 2>&1 && return 0
  # if failed: abort
  fatal "$NAME: required but not installed. Please install it manually."
}


# Invokes the system's package manager (if supported)
# to install a software package
offer_install() {
  local NAME=$1
  local PKGS=$2

  yes_or_fatal "Do you want to install $NAME through your package manager now?" "$NAME is required. Please install it manually."

  # find the right package name for the given $DIST
  for pair in $PKGS; do
    if [[ "$pair" =~ ^$DIST ]]; then
      local PKG="${pair#*:}"
      break
    elif [[ "$pair" =~ ^default ]]; then
      local DEFPKG="${pair#*:}"
    fi
  done

  # use default package if no exception for this system was provided
  local PKG=${PKG:-$DEFPKG}

  # install
  if [[ $(id -u) -ne 0 ]]; then
    if [[ $(command -v sudo) ]]; then
      info "You are not root. Using sudo."
      local PREFIX="sudo"
    else
      fatal "You are not root and the sudo command cannot be found. Cannot install dependencies."
    fi
  fi

  clear
  say "\n\n------- PACKAGE MANAGER --------"
  $PREFIX $INSTALL $PKG
  say "---- END OF PACKAGE MANAGER ----\n\n"
}

check_version() {
  local NAME=$1
  local V_REQ=$2
  local V_EXIST=$3
  [[ $V_EXIST = $V_REQ ]] || fatal "$NAME: found version \"$V_EXIST\", but \"$V_REQ\" is required."
}

check_dependencies() {
  info "Checking dependencies..."

  # PostgreSQL 9.0.0 <= v < 10.x.x
  local pkgs="default:postgresql gentoo:postgresql-server"
  exists "PostgreSQL" "postgres" "$pkgs"
  local v=$(postgres --version | cut -d' ' -f3 | cut -d'.' -f1)
  check_version "PostgreSQL" "9" $v

  # make sure postgresql server is started
  if ! pgrep postgres >/dev/null; then
    warn "The PostgreSQL server is not running."

    # determine the right start command for the distro
    case "$DIST" in
      (arch)
        START_PSQL="rc.d start postgresql"
        ;;
      (gentoo)
        START_PSQL="/etc/init.d/postgresql-9.1 start"
        ;;
      (*)
        fatal "I don't know how to start the PostgreSQL server on your system. Please start the server manually."
        ;;
    esac

    if [[ $(id -u) -ne 0 ]]; then
      if [[ $(command -v sudo) ]]; then
        info "Using sudo to start the PostgreSQL server."
        PREFIX="sudo"
      else
        fatal "You are not root and the sudo command cannot be found. Please start the PostgreSQL server manually."
      fi
    fi

    $PREFIX $START_PSQL
  fi

  # git
  exists "Git" "git" "default:git"

  # GraphicsMagick or ImageMagick
  # TODO: ugly not to use "exists" function
  [[ $(command -v gm 2>/dev/null) || $(command -v mogrify 2>/dev/null) ]] || ( warning "ImageMagick/GraphicsMagick: one of the two is required but not installed."; offer_install "GraphicsMagick" "default:graphicsmagick" )

  info "All dependencies are installed."
}

install_rvm() {
  # skip if rvm exists or user doesn't want to install it.
  # TODO: ~/.rvm exists even if the RVM install was aborted. Try harder.
  [[ -d ~/.rvm ]] && return 0

  warn "RVM is not installed."
  yes_or_fatal "Do you want to install RVM now?" "RVM is required. Please install it manually."

  info "fetching RVM installation script from http://get.rvm.io"
  curl -L get.rvm.io | bash -s stable || fatal "Installation of RVM failed. Please install it manually."
}

install_ruby() {
  # skip if ruby v1.9.3 is installed
  if rvm list | grep -q "ruby-1.9.3"; then
    return 0
  fi

  clear
  info "Installing ruby 1.9.3"
  info "You will see a number of requirements that your system must meet in order to install ruby."
  info "Press any key to show the requirements."
  read -n1

  safety off
    load_rvm
    rvm requirements
    info "Press any key to continue installing ruby 1.9.3."
    read -n1
    rvm install 1.9.3
  safety on
}

setup_user() {
  say "It is recommended to run libertree as a system user."
  say "Please input the name of the account you want to use, or press enter for the user \"libertree\" [default]"
  read username

  if [[ "${username:-default}" == "default" ]]; then
    LT_USER="libertree"
  else
    LT_USER=$username
  fi
  info "Will use \"$LT_USER\" as the system user."

  # skip if user exists
  $(id -u $LT_USER >/dev/null 2>&1) && return 0

  # otherwise add user as root
  local PREFIX=""

  if [[ $(id -u) -ne 0 ]]; then
    if [[ $(command -v sudo) ]]; then
      info "You are not root. Using sudo."
      PREFIX="sudo"
    else
      fatal "You are not root and the sudo command cannot be found. Please run this script as root."
    fi
  fi

  $PREFIX useradd -m $LT_USER
  info "enter new password for user \"$LT_USER\""
  $PREFIX passwd $LT_USER || fatal "removing user \"$LT_USER\" because no password was supplied." "$PREFIX userdel -rf $LT_USER"
}

install_as_system_user() {
  [[ $(id -u $LT_USER) ]] || fatal "The user \"$LT_USER\" does not exist."

  if [[ $(id -u) -ne 0 ]]; then
    info "Switching to user \"$LT_USER\"."
  fi

  # export functions to subshell
  export -f safety
  export -f say info warn fatal
  export -f yes_or_fatal skip_decision
  export -f install_rvm install_ruby load_rvm clone_repos setup_db setup_backend setup_frontend
  export -f stuff_for_system_user
  su $LT_USER -c "stuff_for_system_user"
}

load_rvm() {
  safety off
    source ~/.rvm/scripts/rvm
  safety on
}

# --------------------------------------------------------------------------------
# Functions to be used as the libertree user

stuff_for_system_user() {
  safety on # never do without safety checks, even in subshell

  install_rvm
  load_rvm
  install_ruby

  clone_repos

  skip_decision "Do you want to create a new db?"             && setup_db
  skip_decision "Do you want to install the ruby backend?"    && setup_backend
  skip_decision "Do you want to install the ramaze frontend?" && setup_frontend
}

clone_repos() {
  info "Cloning repositories as libertree user..."

  # TODO: update with proper URL for public repos
  URL="libertree-public-repo"

  mkdir -p ~/git
  safety off
    cd ~/git
  safety on
  for repo in libertree-db \
              libertree-backend-rb \
              libertree-client-rb \
              libertree-frontend-ramaze; do
    if [[ ! -d $repo ]]; then
      git clone "$URL/$repo.git"
    else
      safety off
        cd "$repo"
      safety on
      git pull origin
      safety off
        cd -
      safety on
    fi
  done
}


setup_db() {
  # abort if db server is not running
  if ! pgrep postgres >/dev/null; then
    fatal "The PostgreSQL server is not running. Please start it manually."
  fi

  # TODO: skip if databases already exists

  # TODO: untested
  safety off
    cd ~/git/libertree-db
  safety on
  export PGHOST=localhost
  ./createuser.sh
  ./createdb.sh
  cp database.yaml.example database.yaml
  safety off
    cd rb
    rvm use --create 1.9.3@libertree-db
  safety on
  gem install bundler
  bundle install
  ./migrate.sh
}

setup_backend() {
  safety off
    cd ~/git/libertree-backend-rb
    rvm use --create 1.9.3@libertree-backend-rb
  safety on
  gem install bundler
  bundle install
  # TODO: only do this if keys don't exist
  bundle exec ruby generate-key-pair.rb

  # copy config.yaml.example unless config.yaml exists
  if [[ -e config.yaml ]]; then
    warn "config.yaml already exists."
    skip_decision "Do you want to overwrite it with config.yaml.example?" && cp config.yaml.example config.yaml
  else
    cp config.yaml.example config.yaml
  fi

  # ask if $EDITOR is undefined
  if [[ "${EDITOR:-unset}" == "unset" ]]; then
    say "What program do you want to use for editing the configuration file?"
    read -s choice
    command -v $choice >/dev/null 2>&1 || fatal "The editor could not be found."
    EDITOR=$choice
  else
    say "Opening configuration file for editing tasks."
    say "Please press a key to continue."
    read -n1
  fi

  $EDITOR config.yaml
  info "Running test suite now"
  bundle exec bin/test.sh
}

setup_frontend() {
  # TODO: untested
  safety off
    cd ~/git/libertree-frontend-ramaze
    rvm use --create 1.9.3@libertree-frontend-ramaze
  safety on
  gem install bundler
  bundle install
  safety off
    cd config
  safety on

  # instantiate database.yaml
  if [[ -e database.yaml ]]; then
    warn "database.yaml already exists."
    skip_decision "Do you want to overwrite it with database.yaml.example?" && cp database.yaml.example database.yaml
  else
    cp database.yaml.example database.yaml
  fi
}

# --------------------------------------------------------------------------------
# Main

wizard() {
  determine_system
  check_dependencies
  setup_user
  install_as_system_user
  say "\nYour Libertree has been planted."
}

wizard
